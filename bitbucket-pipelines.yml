# Note: This image can be found in build/pipelines/docker-image
image: atlassianlabs/atlaskit-mk-2:1.0.12
# This ensures we do a full clone on each build which prevents issues when cross referencing
# changesets and releases
clone:
  depth: full
options:
  size: 2x

pipelines:
  branches:
    master:
      - step:
          script:
            # Note: in master, this script will rebase you onto latest origin/master.
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - (cd build/ci-scripts && yarn stop-if-older-build)
            - yarn build
            - node build/ci-scripts/run.if.package.changed.js @atlaskit/editor-mobile-bridge -- yarn build:editor-mobile-bridge
            # Bump all packages and their dependents using saved changesets.
            - yarn changeset bump
            # We push the bumped packages to master now as it's much better to fail whilst BB is
            # ahead of npm, than the other way round.
            - git push
            # We run the build:pkg script again, because the versions in our package.jsons may have changed
            # after the bump. We've kept it running in both places, just to limit the scope of this change
            # so that we don't break anything that was working previously.
            - yarn build:pkg
            # Release all unreleased packages.
            - yarn changeset release --public
            - git push --tags # Push only the tags.
            - (cd build/ci-scripts && yarn restart-stopped-build)
          after-script:
            - yarn send:buildEvents
          caches:
            - node

  default:
    - parallel:
        - step:
            name: Building dists
            script:
              - source ./build-setup.sh
              - bolt install --pure-lockfile
              - yarn build
              - node build/ci-scripts/run.if.package.changed.js @atlaskit/editor-mobile-bridge -- yarn build:editor-mobile-bridge
            after-script:
              - yarn send:stepFailureEvents
            caches:
              - node
        - step:
            name: Lint + Typecheck
            script:
              - source ./build-setup.sh
              - bolt install --pure-lockfile
              - node build/ci-scripts/run.tool.if.changed.js eslint -- yarn lint:eslint
              - node build/ci-scripts/run.tool.if.changed.js stylelint -- yarn lint:stylelint
              - node build/ci-scripts/run.tool.if.changed.js flow -- yarn typecheck:flow
              - node build/ci-scripts/run.tool.if.changed.js typescript -- yarn typecheck:typescript
              # Get the commit that we diverged from master at.
              - export DIVERGED_AT=$(git merge-base master HEAD)
              # Get a comma separated list of changed files.
              - export CHANGED_FILES=$(git diff --name-only $DIVERGED_AT -- 'packages' 'build' 'website' | grep -E 'js$|ts$|tsx$' | tr '\n' ',')
              # The below runs prettier over all changed files and fails if anyone of them don't match prettier's rules.
              # We add fileMock.js to the list of files so that we never pass an empty list to prettier.
              - yarn prettier --no-editorconfig "{$CHANGED_FILES,fileMock.js}" --list-different
            after-script:
              - yarn send:stepFailureEvents
            caches:
              - node
        - step:
            name: Check bundle sizes
            script:
              - source ./build-setup.sh
              - bolt install --pure-lockfile
              - bolt measure:dependents
            after-script:
              - yarn send:stepFailureEvents
            caches:
              - node
        - step:
            name: Unit Testing
            script:
              - source ./build-setup.sh
              - bolt install --pure-lockfile
              # Run the non-editor tests, --passWithNoTests has been added in case of no tests found to avoid failure in CI.
              - TEST_ONLY_PATTERN='!packages/editor' yarn test:changed --passWithNoTests
              # Run the editor tests (runInBand is required or it fails in CI)
              - TEST_ONLY_PATTERN='packages/editor' yarn test:changed --runInBand --passWithNoTests
              # This script acts like a unit test to check changes to @atlaskit/adf-schema.
              - node build/ci-scripts/run.if.package.changed.js @atlaskit/adf-schema -- yarn build:adf-schema:checkuptodate
            after-script:
              - yarn send:stepFailureEvents
            caches:
              - node
        # https://product-fabric.atlassian.net/browse/ED-6927
        # - step:
        #     name: Browser Unit Testing
        #     script:
        #       - source ./build-setup.sh
        #       - bolt install --pure-lockfile
        #       - echo "Run browser unit tests using Karma + Browserstack"
        #       - node build/ci-scripts/run.tool.if.changed.js karma -- yarn test:browser:browserstack
        #     after-script:
        #       - yarn send:stepFailureEvents
        #     caches:
        #       - node
        - step:
            name: Browser Integration Testing
            script:
              - source ./build-setup.sh
              - bolt install --pure-lockfile
              - echo "Run browser integration tests using Webdriver + Browserstack"
              # If we have changed any packages with webdriver tests, we wait until browserstack has free resources, then run our tests
              - LOCAL_IDENTIFIER=$(date +%s) BS_RETRY=5 BS_BUILD_ALLOWED=4 node build/ci-scripts/run.tool.if.changed.js webdriver -- node build/ci-scripts/wait.for.browserstack.resources.js && yarn test:webdriver:browserstack:changed
            after-script:
              - yarn send:stepFailureEvents
            caches:
              - node
        - step:
            name: Visual Regression Tests
            image: atlassianlabs/atlaskit-mk-2-vr:1.0.12
            script:
              - source ./build-setup.sh
              - git lfs pull
              - bolt install --pure-lockfile
              - yarn run test:vr:changed
            after-script:
              # Extract all the diff images and store them into a folder for download.
              - mkdir ./imageSnapshotFailures && find . \( -name '*-diff.png' -or -name '*-error.png' \) -not -path "./node_modules/*" -exec cp {} ./imageSnapshotFailures \;
              - yarn send:stepFailureEvents
            # If a failure occurs, you can download the image snapshot of the differences.
            artifacts:
              - imageSnapshotFailures/**
            caches:
              - node
        - step:
            name: Building website
            script:
              - source ./build-setup.sh
              - bolt install --pure-lockfile
              - cd website
              # This next line just makes it so we can skip website builds by having a branch name that starts with "skip-website/".
              - if [[ "$BITBUCKET_BRANCH" == skip-website/* ]]; then echo "Skipping website build" && mkdir dist && echo "Build skipped" > dist/index.html; else WEBSITE_ENV=staging yarn build:no-minimize; fi
              - yarn build:copy
              - set -o pipefail # Make sure we fail if the deployment fails.
              # We pipe the output to stdout AND deploy-log.txt so that we can read the live url
              - yarn deploy:staging | tee deploy-log.txt
              - cat deploy-log.txt | grep "URL:" | sed "s/Live Draft Url..//gi" > netlify-link.txt
              - echo "Uploading netlify build link to s3 so that we can fetch at the end..."
              - node ../build/ci-scripts/upload.build.artefact.for.commit.js netlify-link.txt
            after-script:
              - yarn send:stepFailureEvents
            caches:
              - node
    - step:
        name: Sending Website Build Url
        script:
          - (cd build/utils && yarn install) # Needed for npm-run when updating status.
          - cd build/ci-scripts
          - yarn install
          - node download.build.artefact.for.commit.js netlify-link.txt
          - node update.build.status.with.netlify.link.js
        after-script:
          - yarn send:buildEvents

  # Pipelines that can be scheduled or triggered manually.
  custom:
    # This should only be called by a scheduled build to deploy production website from latest master.
    build-website-production:
      - step:
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - cd website
            - WEBSITE_ENV=production yarn build
            - yarn build:copy
            - yarn deploy:production
          after-script:
            - yarn send:buildEvents
          caches:
            - node

    # This can be called to deploy staging website from any branches.
    build-website-staging:
      - step:
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - cd website
            - WEBSITE_ENV=staging yarn build:no-minimize
            - yarn build:copy
            - set -o pipefail
            - yarn deploy:staging | tee deploy-log.txt
            - cat deploy-log.txt | grep "URL:" | sed "s/Live Draft Url..//gi" > netlify-link.txt
            - echo "Uploading netlify build link to s3 so that we can fetch at the end..."
            - node ../build/ci-scripts/upload.build.artefact.for.commit.js netlify-link.txt
          after-script:
            - yarn send:buildEvents
          caches:
            - node

    # This should only be called by a scheduled build to check the bundle-size after a merge to master and on dependent packages.
    bundle-size-master-check:
      - step:
          script:
            - source ./build-setup.sh
            - git merge master --no-edit
            - bolt install --pure-lockfile
            - yarn measure:dependents
          after-script:
            - yarn send:buildEvents
          caches:
            - node

    # This should only be called by a scheduled or manual build from master.
    # It builds the website and send the data to redash.
    send-website-build-analytics:
      - step:
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - cd website
            - yarn build:report
            # We could optionally upload these to s3 if we wanted, leaving this here as an example:
            # - node ../build/ci-scripts/upload.build.artefact.for.commit.js dist/report.html
            # - node ../build/ci-scripts/upload.build.artefact.for.commit.js dist/stats.json
            - node ./scripts/uploadBundleAnalyticsEvent.js
          after-script:
            - yarn send:buildEvents
          caches:
            - node

    # This will run the full suite of the webdriver tests on Browserstack.
    build-webdriver:
      - step:
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - yarn test:webdriver:browserstack
          after-script:
            - yarn send:buildEvents
          caches:
            - node

    # This will run the full suite of the visual regression tests using Docker.
    build-visual-regression:
      - step:
          image: atlassianlabs/atlaskit-mk-2-vr:1.0.12
          script:
            - source ./build-setup.sh
            - git lfs pull
            - bolt install --pure-lockfile
            - yarn run test:vr
          after-script:
            # Extract all the diff images and store them into a folder for download.
            - mkdir ./imageSnapshotFailures && find . \( -name '*-diff.png' -or -name '*-error.png' \) -not -path "./node_modules/*" -exec cp {} ./imageSnapshotFailures \;
            - yarn send:buildEvents
          # If a failure occurs, you can download the image snapshot of the differences.
          artifacts:
            - imageSnapshotFailures/**
          caches:
            - node

    # This will run essentially the branch builds, but without any optimizations and should be manually.
    # This build should be run in any potentially risky builds.
    run-full-suite:
      - parallel:
          - step:
              name: Building packages
              script:
                - source ./build-setup.sh
                - bolt install --pure-lockfile
                - yarn build
              after-script:
                - yarn send:stepFailureEvents
          - step:
              name: Lint + Typecheck
              script:
                - source ./build-setup.sh
                - bolt install --pure-lockfile
                - yarn lint
                - yarn typecheck
              after-script:
                - yarn send:stepFailureEvents
          - step:
              name: Running All Unit tests
              script:
                - source ./build-setup.sh
                - bolt install --pure-lockfile
                # Run the non-editor tests.
                - TEST_ONLY_PATTERN='!packages/editor' yarn test:CI
                # Run the editor tests (runInBand is required or it fails in CI)
                - TEST_ONLY_PATTERN='packages/editor' yarn test:CI --runInBand
              after-script:
                - yarn send:stepFailureEvents
          - step:
              name: Running All Browser Unit tests
              script:
                - source ./build-setup.sh
                - bolt install --pure-lockfile
                - yarn test:browser:browserstack
              after-script:
                - yarn send:stepFailureEvents
          - step:
              name: Running All Browser Integration tests
              script:
                - source ./build-setup.sh
                - bolt install --pure-lockfile
                - yarn test:webdriver:browserstack
              after-script:
                - yarn send:stepFailureEvents
          - step:
              name: Running All Visual Regression tests
              image: atlassianlabs/atlaskit-mk-2-vr:1.0.12
              script:
                - source ./build-setup.sh
                - bolt install --pure-lockfile
                - yarn test:vr
              after-script:
                # Extract all the diff images and store them into a folder for download.
                - mkdir ./imageSnapshotFailures && find . \( -name '*-diff.png' -or -name '*-error.png' \) -not -path "./node_modules/*" -exec cp {} ./imageSnapshotFailures \;
                - yarn send:stepFailureEvents
              # If a failure occurs, you can download the image snapshot of the differences.
              artifacts:
                - imageSnapshotFailures/**
          - step:
              name: Building the website
              script:
                - source ./build-setup.sh
                - bolt install --pure-lockfile
                - cd website
                # don't worry about deploying, this build will always be run alongside a branch build
                - yarn build
              after-script:
                - yarn send:buildEvents

    # This will build all the packages and run bundle-analysis.
    run-bundle-analysis:
      - step:
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - yarn build
            - yarn build:bundle-analysis
          after-script:
            - yarn send:buildEvents
          caches:
            - node
    # This build is used as our `merge` build when managing concurrent PR to master.
    landkid:
      - parallel:
          - step:
              name: Building
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - yarn build
              after-script:
                - yarn send:stepFailureEvents
          - step:
              name: Linting
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - yarn lint
              after-script:
                - yarn send:stepFailureEvents
          - step:
              name: Typechecking (and checking changesets)
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - yarn typecheck
                - echo "We are now about to run the `version` command which will read changesets and bump packages"
                - echo "We do this so that we know if the repo will be in an inconsistent state when this branch hits master"
                - echo "If the step below fails, it's because a changeset may be bumping a package that is depended upon by a package that didn't exist when the changeset was created"
                - echo "Read the very last error message, it will tell you exactly what is wrong (ignore all the first warnings you'll see)"
                - yarn changeset bump
              after-script:
                - yarn send:stepFailureEvents
          # Rest of the steps are jest tests. We no longer use the $BITBUCKET_PARALLEL_STEP_COUNT and $BITBUCKET_PARALLEL_STEP
          # variables as they mean the jest steps need to be in their own parallel block, so we just hardcode them here.
          # Editor tests need to runInBand.
          - step:
              name: Running Editor Unit tests - Jest 1 of 2 chunks
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - export TMPFILE=$(mktemp /tmp/jest.XXXXXX) && TEST_ONLY_PATTERN='packages/editor' yarn --silent jest --listTests --json > $TMPFILE
                - STEPS="2" STEP_IDX="0" PARALLELIZE_TESTS_FILE="$TMPFILE" yarn jest --runInBand
              after-script:
                - yarn send:stepFailureEvents
          - step:
              name: Running Editor Unit tests - Jest 2 of 2 chunks
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - export TMPFILE=$(mktemp /tmp/jest.XXXXXX) && TEST_ONLY_PATTERN='packages/editor' yarn --silent jest --listTests --json > $TMPFILE
                - STEPS="2" STEP_IDX="1" PARALLELIZE_TESTS_FILE="$TMPFILE" yarn jest --runInBand
              after-script:
                - yarn send:stepFailureEvents
          - step:
              name: Running Non Editor Unit tests
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - TEST_ONLY_PATTERN='!packages/editor' yarn test
              after-script:
                - yarn send:stepFailureEvents
          - step:
              name: Running Browser Integration tests
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - LANDKID=true yarn test:webdriver:browserstack:changed
              after-script:
                - yarn send:stepFailureEvents
          - step:
              name: Running Visual Regression tests
              image: atlassianlabs/atlaskit-mk-2-vr:1.0.12
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - git lfs pull
                - bolt install --pure-lockfile
                - yarn test:vr
              after-script:
                # Extract all the diff images and store them into a folder for download.
                - mkdir ./imageSnapshotFailures && find . \( -name '*-diff.png' -or -name '*-error.png' \) -not -path "./node_modules/*" -exec cp {} ./imageSnapshotFailures \;
                - yarn send:stepFailureEvents
              # If a failure occurs, you can download the image snapshot of the differences.
              artifacts:
                - imageSnapshotFailures/**
      - step:
          name: Wait until no master is running
          script:
            - source ./build-setup.sh
            - cd build/ci-scripts
            - yarn --ignore-engines
            - node ./wait.until.no.master.build.running.js
          after-script:
            - yarn send:buildEvents

    # This build should only be run on the master branch, once per day.
    # It manually clears the cache and runs a very quick install node_modules.
    # We split into two steps so that one can clear the cache so that the second one starts with no cache.
    # (Which causes it to upload when it's finished).
    reseed-pipelines-cache:
      - step:
          name: Clearing old cache
          script:
            - ([[ "$BITBUCKET_BRANCH" == "master" ]]) || (echo "This build should only be run on master" && exit 1)
            - cd build/ci-scripts
            - yarn install --pure-lockfile
            - node clear.pipelines.node.cache.js
      - step:
          name: Creating new cache
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            # We re-clear the cache here in case any other builds have managed to start and finish in between us starting.
            # (our build will only upload a cache if there is none when the build finishes).
            - node build/ci-scripts/clear.pipelines.node.cache.js
          caches:
            - node

    # This build allow to deploy branch dists to easily tests new version of components into consumers / products code base.
    deploy-branch-build-dists:
      - step:
          name: Deploy branch build dists
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - yarn build
            - export CHANGED_PACKAGES=$(node build/ci-scripts/get.changed.packages.since.master.js)
            # Change into a glob pattern (removing brackets, spaces and quotes).
            - export CHANGED_PACKAGES_GLOB=$(echo "$CHANGED_PACKAGES" | sed 's/[][" ]//g')
            # We add in the exta brances and a trailing comma in case we only have one package
            - bolt ws exec --only-fs="{$CHANGED_PACKAGES_GLOB,}" -- npm pack
            - mkdir -p dists/
            - node build/ci-scripts/copy.built.tgzs.to.dists.dir.js
            - for file in dists/*; do node build/ci-scripts/upload.build.artefact.for.commit.js $file dists/; done
          caches:
            - node

    # This is a custom build step that upload ratchet files to S3 on commit.
    bundle-size-check-upload-to-s3:
      - step:
          name: Bundle size check step upload commit to S3
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - yarn measure:dependents --s3
            - node build/ci-scripts/merge.json.in.folder.js .currentBundleSize
            - if [ -e ".currentBundleSize/merged.json" ]; then node build/ci-scripts/upload.build.artefact.for.commit.js .currentBundleSize/merged.json; fi
          artifacts:
            # Remove this adding for debugging
            - .currentBundleSize/**
          caches:
            - node

    # This is a custom build step that merges master branch then upload ratchet files to S3 on a scheduled basis.
    # It is broken to multiple steps to gain speed and avoid OOM issues.
    push-bundle-size-to-s3:
      - parallel:
          - step:
              name: Bundle size update for editor-part-1 packages
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - node build/ci-scripts/get.pkgs.in.team.js editor-part-1| xargs -n1 -P2 yarn measure --updateSnapshot --s3
              # required to debug, may be we can remove this later
              artifacts:
                - .masterBundleSize/**
              caches:
                - node
          - step:
              name: Bundle size update for editor-part-2 packages
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - node build/ci-scripts/get.pkgs.in.team.js editor-part-2| xargs -n1 -P2 yarn measure --updateSnapshot --s3
              # required to debug, may be we can remove this later
              artifacts:
                - .masterBundleSize/**
              caches:
                - node
          - step:
              name: Bundle size update for core packages
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - node build/ci-scripts/get.pkgs.in.team.js core| xargs -n1 -P2 yarn measure --updateSnapshot --s3
              # required to debug, may be we can remove this later
              artifacts:
                - .masterBundleSize/**
              caches:
                - node
          - step:
              name: Bundle size update for media packages
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - node build/ci-scripts/get.pkgs.in.team.js media| xargs -n1 -P2 yarn measure --updateSnapshot --s3
              # required to debug, may be we can remove this later
              artifacts:
                - .masterBundleSize/**
              caches:
                - node
          - step:
              name: Bundle size update for all other packages
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - export input=elements,bitbucket,css-packs,growth,help,home,jira,navigation,people-and-teams,search,teamwork-ecosystem
                - node build/ci-scripts/get.pkgs.in.team.js $input| xargs -n1 -P2 yarn measure --updateSnapshot --s3
              # required to debug, may be we can remove this later
              artifacts:
                - .masterBundleSize/**
              caches:
                - node
